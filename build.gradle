buildscript {
	repositories {
		jcenter()
		maven {
			name = "forge"
			url = "http://files.minecraftforge.net/maven"
		}
		maven {
			name = "sonatype"
			url = "https://oss.sonatype.org/content/repositories/snapshots/"
		}
	}
	dependencies {
		classpath 'net.minecraftforge.gradle:ForgeGradle:2.2-SNAPSHOT'
	}
}

plugins {
	id "net.minecraftforge.gradle.forge" version "2.0.2"
	id "com.matthewprenger.cursegradle" version "1.0.8"
	id "se.bjurr.gitchangelog.git-changelog-gradle-plugin" version "1.32"
	id "com.jfrog.bintray" version "1.7"
}

apply plugin: "java"
apply plugin: "maven-publish"

version = version_major + '.' + version_minor + '.' + version_patch + '.' + getBuildNumber()
if (project.hasProperty('buildQualifier')) {
	version = project.version + '-' + project.buildQualifier
}
group= "de.nedelosk.modularmachines" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "modularmachines_" + mcversion

// java version
sourceCompatibility = 1.8
targetCompatibility = 1.8

minecraft {
	version = mcversion + "-" + forgeversion
	runDir = "run"
	mappings = mcp_mappings

	replace '@VERSION@', project.version
	replace '@BUILD_NUMBER@', getBuildNumber()
}

jar {
    manifest {
        attributes 'FMLAT': 'modularmachines_at.cfg'
    }
}

publishing {
	publications {
		MCMMPublish(MavenPublication) {
			from components.java
			artifact deobfJar
			artifact sourcesJar
			artifact apiJar
			groupId project.group
			artifactId project.archivesBaseName
			version project.version
		}
	}
}

bintray {
	if(System.getenv().BINTRAY_USER != null){
		user = System.getenv('BINTRAY_USER')
		key = System.getenv('BINTRAY_KEY')
		publications = ["MCMMPublish"]
		publish = true
		override = false
		pkg {
			repo = 'MC'
			name = project.group
			version {
				name = project.version
			}
		}
	}
}

task deobfJar(type: Jar) {
    from sourceSets.main.output
    classifier = 'deobf'
}

task sourcesJar(type: Jar) {
	from sourceSets.main.allJava
	exclude 'forestry'
	classifier = 'sources'
}

task apiJar(type: Jar) {
	from sourceSets.main.allSource
	from sourceSets.main.output
	include 'de/nedelosk/modularmachines/api/**'
	classifier = 'api'
}

artifacts {
	archives deobfJar
	archives sourcesJar
	archives apiJar
}

repositories {
	maven {
		url "http://dvs1.progwml6.com/files/maven"
	}
	maven {
		name = "ic2"
		url = "http://maven.ic2.player.to/"
	}
	maven {
		url 'http://maven.epoxide.xyz'
	}
	maven {
        name "ProfMobius Maven FS"
        url "http://mobiusstrip.eu/maven"
    }
	maven {
		name 'tterrag maven'
		url "http://maven.tterrag.com/"
	}
}

dependencies {
	deobfCompile "net.darkhax.tesla:Tesla:${tesla_version}"
	deobfCompile "mezz.jei:jei_${mcversion}:${jei_version}:api"
	runtime "mezz.jei:jei_${mcversion}:${jei_version}"
	deobfCompile "net.industrial-craft:industrialcraft-2:${ic2_version}:api"
	deobfCompile "net.industrial-craft:industrialcraft-2:${ic2_version}:dev"
	//deobfCompile "mcp.mobius.waila:Waila:${waila_version}_1.9.4"
	deobfCompile "mcjty.theoneprobe:TheOneProbe:${top_version}"
	deobfCompile "slimeknights.mantle:Mantle:${mcversion}-${mantle_version}"
	deobfCompile "net.sengir.forestry:forestry_${mcversion}:${forestry_version}"
}

processResources {

	// this will ensure that this task is redone when the versions change.
	inputs.property "version", project.version
	inputs.property "mcversion", project.minecraft.version

	// replace stuff in mcmod.info, nothing else
	from(sourceSets.main.resources.srcDirs) {
		include 'mcmod.info'

		// replace version and mcversion
		expand 'version':project.version, 'mcversion':project.minecraft.version
	}

	// copy everything else, thats not the mcmod.info
	from(sourceSets.main.resources.srcDirs) {
		exclude 'mcmod.info'
		exclude '**/*.md'
	}
	
	// Move access transformers to META-INF
	rename '(.+_at.cfg)', 'META-INF/$1'
}

def getBuildNumber() {
	return "$System.env.DRONE_BUILD_NUMBER" != "null" ? "$System.env.DRONE_BUILD_NUMBER" : "0"
}

curseforge {
	if(System.getenv().CURSEAPIKEY != null){
		apiKey = System.getenv().CURSEAPIKEY
		project {
			id = '233073'
			releaseType = 'beta'
			addArtifact sourcesJar
			addArtifact apiJar
			addArtifact deobfJar
		}
	}
}
